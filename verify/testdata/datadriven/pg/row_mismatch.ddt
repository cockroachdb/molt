#
# Throw in every type into a table and ensure we can compare all of them.
#

exec all
CREATE TYPE test_enum AS ENUM('a', 'bbb', 'c');
CREATE TABLE test_table (
    bool_test BOOL DEFAULT true,
    id INT4,
    id_b INT4 DEFAULT 0,
    PRIMARY KEY (id, id_b),
    char_test "char" DEFAULT 'abc',
    bpchar_test CHAR DEFAULT 'a',
    varchar_test VARCHAR DEFAULT 'abcd',
    oid_test OID DEFAULT 81,
    float4_test FLOAT4 DEFAULT 1.25,
    float8_test FLOAT8 DEFAULT 1.5,
    int2_test INT2 DEFAULT -1,
    int4_test INT4 DEFAULT 123,
    int8_test INT8 DEFAULT 666,
    jsonb_test JSONB DEFAULT '[1,2,3]',
    uuid UUID DEFAULT '35750bee-6d1f-43f0-a36c-d660474bfd2d',
    ts_test TIMESTAMP DEFAULT '2020-03-21 01:02:03.123456',
    tstz_test TIMESTAMPTZ DEFAULT '2020-03-21 01:02:03.123456+00',
    time_test TIME DEFAULT '01:02:45.123456',
    timetz_test TIME DEFAULT '01:02:03.234999+03',
    date_test DATE DEFAULT '2020-09-13',
    bytes_test BYTEA DEFAULT 'deadbeef',
    numeric_test NUMERIC DEFAULT '123.549875545',
    simple_arr_test TEXT[] DEFAULT '{"a", "b"}',
    bitarr_test VARBIT(10) DEFAULT '0100',
    enum_test test_enum DEFAULT 'bbb',
    int_arr_test int8[] DEFAULT '{1, 2, 3}',
    enum_arr_test _test_enum DEFAULT '{"a", "bbb"}'
);
INSERT INTO test_table(id)
SELECT id FROM generate_series(1, 100) AS t(id)
----
[pg] INSERT 0 100
[crdb] INSERT 0 100

verify
----
{"level":"info","message":"starting verify on public.test_table, shard 1/1"}
{"level":"info","message":"finished row verification on public.test_table (shard 1/1): truth rows seen: 100, success: 100, missing: 0, mismatch: 0, extraneous: 0, live_retry: 0"}

verify splits=4
----
{"level":"info","message":"starting verify on public.test_table, shard 1/4, range: [<beginning> - 25)"}
{"level":"info","message":"finished row verification on public.test_table (shard 1/4): truth rows seen: 24, success: 24, missing: 0, mismatch: 0, extraneous: 0, live_retry: 0"}
{"level":"info","message":"starting verify on public.test_table, shard 2/4, range: [25 - 49)"}
{"level":"info","message":"finished row verification on public.test_table (shard 2/4): truth rows seen: 24, success: 24, missing: 0, mismatch: 0, extraneous: 0, live_retry: 0"}
{"level":"info","message":"starting verify on public.test_table, shard 3/4, range: [49 - 73)"}
{"level":"info","message":"finished row verification on public.test_table (shard 3/4): truth rows seen: 24, success: 24, missing: 0, mismatch: 0, extraneous: 0, live_retry: 0"}
{"level":"info","message":"starting verify on public.test_table, shard 4/4, range: [73 - <end>]"}
{"level":"info","message":"finished row verification on public.test_table (shard 4/4): truth rows seen: 28, success: 28, missing: 0, mismatch: 0, extraneous: 0, live_retry: 0"}

exec all
DROP TABLE test_table
----
[pg] DROP TABLE
[crdb] DROP TABLE

#
# Check we report mismatches.
#

exec all
CREATE TABLE common_table (
    id INT8 PRIMARY KEY,
    str TEXT
)
----
[pg] CREATE TABLE
[crdb] CREATE TABLE

exec source
INSERT INTO common_table VALUES
    (100, 'same value'),
    (125, 'i am missing'),
    (150, 'different value'),
    (175, NULL),
    (200, 'also same value'),
    (250, 'missing on lie')
----
[pg] INSERT 0 6

exec target
INSERT INTO common_table VALUES
    (50, 'extraneous row'),
    (100, 'same value'),
    (150, NULL),
    (175, NULL),
    (200, 'also same value'),
    (300, 'missing on truth')
----
[crdb] INSERT 0 6

# Verify with extraneous rows on non source of truth.
verify
----
{"level":"info","message":"starting verify on public.common_table, shard 1/1"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["50"],"message":"extraneous row"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["125"],"message":"missing row"}
{"level":"warn","table_schema":"public","table_name":"common_table","source_values":{"str":"different value"},"target_values":{"str":"NULL"},"primary_key":["150"],"message":"mismatching row value"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["250"],"message":"missing row"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["300"],"message":"extraneous row"}
{"level":"info","message":"finished row verification on public.common_table (shard 1/1): truth rows seen: 6, success: 3, missing: 2, mismatch: 1, extraneous: 2, live_retry: 0"}

# Verify with extraneous rows on source of truth.
exec source
INSERT INTO common_table VALUES
     (400, 'same value')
----
[pg] INSERT 0 1

verify
----
{"level":"info","message":"starting verify on public.common_table, shard 1/1"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["50"],"message":"extraneous row"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["125"],"message":"missing row"}
{"level":"warn","table_schema":"public","table_name":"common_table","source_values":{"str":"different value"},"target_values":{"str":"NULL"},"primary_key":["150"],"message":"mismatching row value"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["250"],"message":"missing row"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["300"],"message":"extraneous row"}
{"level":"warn","table_schema":"public","table_name":"common_table","primary_key":["400"],"message":"missing row"}
{"level":"info","message":"finished row verification on public.common_table (shard 1/1): truth rows seen: 7, success: 3, missing: 3, mismatch: 1, extraneous: 2, live_retry: 0"}

exec all
DROP TABLE common_table
----
[pg] DROP TABLE
[crdb] DROP TABLE

# Test two tables, but mismatching columns.
exec source
CREATE TABLE table_misaligned_columns (
    id INT8 PRIMARY KEY,
    a INT8,
    not_common_a INT
);
INSERT INTO table_misaligned_columns VALUES
    (1, 2, 1),
    (2, 3, 2)
----
[pg] INSERT 0 2

exec target
CREATE TABLE table_misaligned_columns (
    id INT8 PRIMARY KEY,
    a INT8,
    not_common_b INT
);
INSERT INTO table_misaligned_columns VALUES
    (1, 2, 1),
    (2, 4, 2)
----
[crdb] INSERT 0 2

verify
----
{"level":"warn","table_schema":"public","table_name":"table_misaligned_columns","mismatch_info":"extraneous column not_common_b found","message":"mismatching table definition"}
{"level":"warn","table_schema":"public","table_name":"table_misaligned_columns","mismatch_info":"missing column not_common_a","message":"mismatching table definition"}
{"level":"info","message":"starting verify on public.table_misaligned_columns, shard 1/1"}
{"level":"warn","table_schema":"public","table_name":"table_misaligned_columns","source_values":{"a":"3"},"target_values":{"a":"4"},"primary_key":["2"],"message":"mismatching row value"}
{"level":"info","message":"finished row verification on public.table_misaligned_columns (shard 1/1): truth rows seen: 2, success: 1, missing: 0, mismatch: 1, extraneous: 0, live_retry: 0"}

exec all
DROP TABLE table_misaligned_columns
----
[pg] DROP TABLE
[crdb] DROP TABLE

# Test two tables with comparable types that are not the same.
exec source
CREATE TABLE comparable_type (
    id INT4 PRIMARY KEY,
    f FLOAT4,
    j JSON
);
INSERT INTO comparable_type VALUES
    (1, 1.5, '[]'::jsonb),
    (3, 4, '["mismatch"]'::jsonb);
----
[pg] INSERT 0 2

exec target
CREATE TABLE comparable_type (
    id INT8 PRIMARY KEY,
    f FLOAT8,
    j JSONB
);
INSERT INTO comparable_type VALUES
    (1, 1.5, '[]'::jsonb),
    (3, 4, '["big mismatch"]'::jsonb);
----
[crdb] INSERT 0 2

verify
----
{"level":"info","message":"starting verify on public.comparable_type, shard 1/1"}
{"level":"warn","table_schema":"public","table_name":"comparable_type","source_values":{"j":"[\"mismatch\"]"},"target_values":{"j":"[\"big mismatch\"]"},"primary_key":["3"],"message":"mismatching row value"}
{"level":"info","message":"finished row verification on public.comparable_type (shard 1/1): truth rows seen: 2, success: 1, missing: 0, mismatch: 1, extraneous: 0, live_retry: 0"}