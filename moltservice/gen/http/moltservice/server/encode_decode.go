// Code generated by goa v3.14.1, DO NOT EDIT.
//
// moltservice HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/cockroachdb/molt/moltservice/design -o ./moltservice

package server

import (
	"context"
	"io"
	"net/http"

	moltservice "github.com/cockroachdb/molt/moltservice/gen/moltservice"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateFetchTaskResponse returns an encoder for responses returned by
// the moltservice create_fetch_task endpoint.
func EncodeCreateFetchTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(moltservice.FetchAttemptID)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateFetchTaskRequest returns a decoder for requests sent to the
// moltservice create_fetch_task endpoint.
func DecodeCreateFetchTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateFetchTaskRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewCreateFetchTaskCreateFetchPayload(&body)

		return payload, nil
	}
}
