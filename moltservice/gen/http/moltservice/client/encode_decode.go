// Code generated by goa v3.14.1, DO NOT EDIT.
//
// moltservice HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/cockroachdb/molt/moltservice/design -o ./moltservice

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	moltservice "github.com/cockroachdb/molt/moltservice/gen/moltservice"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateFetchTaskRequest instantiates a HTTP request object with method
// and path set to call the "moltservice" service "create_fetch_task" endpoint
func (c *Client) BuildCreateFetchTaskRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateFetchTaskMoltservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("moltservice", "create_fetch_task", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateFetchTaskRequest returns an encoder for requests sent to the
// moltservice create_fetch_task server.
func EncodeCreateFetchTaskRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*moltservice.CreateFetchPayload)
		if !ok {
			return goahttp.ErrInvalidType("moltservice", "create_fetch_task", "*moltservice.CreateFetchPayload", v)
		}
		body := NewCreateFetchTaskRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("moltservice", "create_fetch_task", err)
		}
		return nil
	}
}

// DecodeCreateFetchTaskResponse returns a decoder for responses returned by
// the moltservice create_fetch_task endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateFetchTaskResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("moltservice", "create_fetch_task", err)
			}
			res := NewCreateFetchTaskFetchAttemptIDOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("moltservice", "create_fetch_task", resp.StatusCode, string(body))
		}
	}
}
