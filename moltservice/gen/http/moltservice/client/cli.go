// Code generated by goa v3.14.1, DO NOT EDIT.
//
// moltservice HTTP client CLI support package
//
// Command:
// $ goa gen github.com/cockroachdb/molt/moltservice/design -o ./moltservice

package client

import (
	"encoding/json"
	"fmt"

	moltservice "github.com/cockroachdb/molt/moltservice/gen/moltservice"
)

// BuildCreateFetchTaskPayload builds the payload for the moltservice
// create_fetch_task endpoint from CLI flags.
func BuildCreateFetchTaskPayload(moltserviceCreateFetchTaskBody string) (*moltservice.CreateFetchPayload, error) {
	var err error
	var body CreateFetchTaskRequestBody
	{
		err = json.Unmarshal([]byte(moltserviceCreateFetchTaskBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bucket_name\": \"http://localhost:5000\",\n      \"bucket_path\": \"fetch/export\",\n      \"cleanup_intermediary_store\": true,\n      \"local_path\": \"/usr/Documents/fetch\",\n      \"local_path_crdb_address\": \"http://localhost:5000\",\n      \"local_path_listen_address\": \"http://localhost:5000\",\n      \"log_file\": \"task.log\",\n      \"mode\": \"DIRECT COPY\",\n      \"store\": \"Local\",\n      \"truncate\": true\n   }'")
		}
	}
	v := &moltservice.CreateFetchPayload{
		Mode:                     body.Mode,
		Store:                    body.Store,
		CleanupIntermediaryStore: body.CleanupIntermediaryStore,
		LocalPath:                body.LocalPath,
		LocalPathListenAddress:   body.LocalPathListenAddress,
		LocalPathCrdbAddress:     body.LocalPathCrdbAddress,
		BucketName:               body.BucketName,
		BucketPath:               body.BucketPath,
		LogFile:                  body.LogFile,
		Truncate:                 body.Truncate,
	}

	return v, nil
}
