// Code generated by goa v3.14.1, DO NOT EDIT.
//
// moltservice HTTP client types
//
// Command:
// $ goa gen github.com/cockroachdb/molt/moltservice/design -o ./moltservice

package client

import (
	moltservice "github.com/cockroachdb/molt/moltservice/gen/moltservice"
)

// CreateFetchTaskRequestBody is the type of the "moltservice" service
// "create_fetch_task" endpoint HTTP request body.
type CreateFetchTaskRequestBody struct {
	// Mode of operation for fetch
	Mode *string `form:"mode,omitempty" json:"mode,omitempty" xml:"mode,omitempty"`
	// Type of intermediary store
	Store *string `form:"store,omitempty" json:"store,omitempty" xml:"store,omitempty"`
	// whether the intermediate store should be cleaned up after the fetch task
	CleanupIntermediaryStore *bool `form:"cleanup_intermediary_store,omitempty" json:"cleanup_intermediary_store,omitempty" xml:"cleanup_intermediary_store,omitempty"`
	// the absolute or relative path to write export files
	LocalPath *string `form:"local_path,omitempty" json:"local_path,omitempty" xml:"local_path,omitempty"`
	// the local address where the file server will be spun up
	LocalPathListenAddress *string `form:"local_path_listen_address,omitempty" json:"local_path_listen_address,omitempty" xml:"local_path_listen_address,omitempty"`
	// the local address CRDB will use to access the import files
	LocalPathCrdbAddress *string `form:"local_path_crdb_address,omitempty" json:"local_path_crdb_address,omitempty" xml:"local_path_crdb_address,omitempty"`
	// the local address CRDB will use to access the import files
	BucketName *string `form:"bucket_name,omitempty" json:"bucket_name,omitempty" xml:"bucket_name,omitempty"`
	// the sub-path within the bucket to write the export files
	BucketPath *string `form:"bucket_path,omitempty" json:"bucket_path,omitempty" xml:"bucket_path,omitempty"`
	// if specified, writes task execution logs to a file and stdout; otherwise,
	// just writes to stdout
	LogFile *string `form:"log_file,omitempty" json:"log_file,omitempty" xml:"log_file,omitempty"`
	// if specified, truncates the target tables before running the data load
	Truncate *bool `form:"truncate,omitempty" json:"truncate,omitempty" xml:"truncate,omitempty"`
}

// NewCreateFetchTaskRequestBody builds the HTTP request body from the payload
// of the "create_fetch_task" endpoint of the "moltservice" service.
func NewCreateFetchTaskRequestBody(p *moltservice.CreateFetchPayload) *CreateFetchTaskRequestBody {
	body := &CreateFetchTaskRequestBody{
		Mode:                     p.Mode,
		Store:                    p.Store,
		CleanupIntermediaryStore: p.CleanupIntermediaryStore,
		LocalPath:                p.LocalPath,
		LocalPathListenAddress:   p.LocalPathListenAddress,
		LocalPathCrdbAddress:     p.LocalPathCrdbAddress,
		BucketName:               p.BucketName,
		BucketPath:               p.BucketPath,
		LogFile:                  p.LogFile,
		Truncate:                 p.Truncate,
	}
	return body
}

// NewCreateFetchTaskFetchAttemptIDOK builds a "moltservice" service
// "create_fetch_task" endpoint result from a HTTP "OK" response.
func NewCreateFetchTaskFetchAttemptIDOK(body int) moltservice.FetchAttemptID {
	v := moltservice.FetchAttemptID(body)

	return v
}
