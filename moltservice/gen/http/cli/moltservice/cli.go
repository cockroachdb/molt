// Code generated by goa v3.14.1, DO NOT EDIT.
//
// moltservice HTTP client CLI support package
//
// Command:
// $ goa gen github.com/cockroachdb/molt/moltservice/design -o ./moltservice

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	moltservicec "github.com/cockroachdb/molt/moltservice/gen/http/moltservice/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `moltservice (create-fetch-task|get-fetch-tasks|get-specific-fetch-task|create-verify-task-from-fetch|get-verify-tasks|get-specific-verify-task)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` moltservice create-fetch-task --body '{
      "bucket_name": "http://localhost:5000",
      "bucket_path": "fetch/export",
      "cleanup_intermediary_store": true,
      "compression": "none",
      "local_path": "/usr/Documents/fetch",
      "local_path_crdb_address": "http://localhost:5000",
      "local_path_listen_address": "http://localhost:5000",
      "log_file": "task.log",
      "mode": "DIRECT_COPY",
      "name": "rluu pg to cockroach",
      "num_batch_rows_export": 100000,
      "num_concurrent_tables": 4,
      "num_flush_bytes": 2000000,
      "num_flush_rows": 200000,
      "pg_drop_slot": false,
      "pg_logical_plugin": "",
      "pg_logical_slot_name": "",
      "source_conn": "postgres://postgres:postgres@localhost:5432/molt?sslmode=disable",
      "store": "Local",
      "target_conn": "postgres://root@localhost:26257/defaultdb?sslmode=disable",
      "truncate": true
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		moltserviceFlags = flag.NewFlagSet("moltservice", flag.ContinueOnError)

		moltserviceCreateFetchTaskFlags    = flag.NewFlagSet("create-fetch-task", flag.ExitOnError)
		moltserviceCreateFetchTaskBodyFlag = moltserviceCreateFetchTaskFlags.String("body", "REQUIRED", "")

		moltserviceGetFetchTasksFlags = flag.NewFlagSet("get-fetch-tasks", flag.ExitOnError)

		moltserviceGetSpecificFetchTaskFlags  = flag.NewFlagSet("get-specific-fetch-task", flag.ExitOnError)
		moltserviceGetSpecificFetchTaskIDFlag = moltserviceGetSpecificFetchTaskFlags.String("id", "REQUIRED", "id for the fetch task")

		moltserviceCreateVerifyTaskFromFetchFlags  = flag.NewFlagSet("create-verify-task-from-fetch", flag.ExitOnError)
		moltserviceCreateVerifyTaskFromFetchIDFlag = moltserviceCreateVerifyTaskFromFetchFlags.String("id", "REQUIRED", "id for the fetch task")

		moltserviceGetVerifyTasksFlags = flag.NewFlagSet("get-verify-tasks", flag.ExitOnError)

		moltserviceGetSpecificVerifyTaskFlags  = flag.NewFlagSet("get-specific-verify-task", flag.ExitOnError)
		moltserviceGetSpecificVerifyTaskIDFlag = moltserviceGetSpecificVerifyTaskFlags.String("id", "REQUIRED", "id for the verify task")
	)
	moltserviceFlags.Usage = moltserviceUsage
	moltserviceCreateFetchTaskFlags.Usage = moltserviceCreateFetchTaskUsage
	moltserviceGetFetchTasksFlags.Usage = moltserviceGetFetchTasksUsage
	moltserviceGetSpecificFetchTaskFlags.Usage = moltserviceGetSpecificFetchTaskUsage
	moltserviceCreateVerifyTaskFromFetchFlags.Usage = moltserviceCreateVerifyTaskFromFetchUsage
	moltserviceGetVerifyTasksFlags.Usage = moltserviceGetVerifyTasksUsage
	moltserviceGetSpecificVerifyTaskFlags.Usage = moltserviceGetSpecificVerifyTaskUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "moltservice":
			svcf = moltserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "moltservice":
			switch epn {
			case "create-fetch-task":
				epf = moltserviceCreateFetchTaskFlags

			case "get-fetch-tasks":
				epf = moltserviceGetFetchTasksFlags

			case "get-specific-fetch-task":
				epf = moltserviceGetSpecificFetchTaskFlags

			case "create-verify-task-from-fetch":
				epf = moltserviceCreateVerifyTaskFromFetchFlags

			case "get-verify-tasks":
				epf = moltserviceGetVerifyTasksFlags

			case "get-specific-verify-task":
				epf = moltserviceGetSpecificVerifyTaskFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "moltservice":
			c := moltservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-fetch-task":
				endpoint = c.CreateFetchTask()
				data, err = moltservicec.BuildCreateFetchTaskPayload(*moltserviceCreateFetchTaskBodyFlag)
			case "get-fetch-tasks":
				endpoint = c.GetFetchTasks()
				data = nil
			case "get-specific-fetch-task":
				endpoint = c.GetSpecificFetchTask()
				data, err = moltservicec.BuildGetSpecificFetchTaskPayload(*moltserviceGetSpecificFetchTaskIDFlag)
			case "create-verify-task-from-fetch":
				endpoint = c.CreateVerifyTaskFromFetch()
				data, err = moltservicec.BuildCreateVerifyTaskFromFetchPayload(*moltserviceCreateVerifyTaskFromFetchIDFlag)
			case "get-verify-tasks":
				endpoint = c.GetVerifyTasks()
				data = nil
			case "get-specific-verify-task":
				endpoint = c.GetSpecificVerifyTask()
				data, err = moltservicec.BuildGetSpecificVerifyTaskPayload(*moltserviceGetSpecificVerifyTaskIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// moltserviceUsage displays the usage of the moltservice command and its
// subcommands.
func moltserviceUsage() {
	fmt.Fprintf(os.Stderr, `MOLT service performs operations using MOLT tooling
Usage:
    %[1]s [globalflags] moltservice COMMAND [flags]

COMMAND:
    create-fetch-task: CreateFetchTask implements create_fetch_task.
    get-fetch-tasks: GetFetchTasks implements get_fetch_tasks.
    get-specific-fetch-task: GetSpecificFetchTask implements get_specific_fetch_task.
    create-verify-task-from-fetch: CreateVerifyTaskFromFetch implements create_verify_task_from_fetch.
    get-verify-tasks: GetVerifyTasks implements get_verify_tasks.
    get-specific-verify-task: GetSpecificVerifyTask implements get_specific_verify_task.

Additional help:
    %[1]s moltservice COMMAND --help
`, os.Args[0])
}
func moltserviceCreateFetchTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice create-fetch-task -body JSON

CreateFetchTask implements create_fetch_task.
    -body JSON: 

Example:
    %[1]s moltservice create-fetch-task --body '{
      "bucket_name": "http://localhost:5000",
      "bucket_path": "fetch/export",
      "cleanup_intermediary_store": true,
      "compression": "none",
      "local_path": "/usr/Documents/fetch",
      "local_path_crdb_address": "http://localhost:5000",
      "local_path_listen_address": "http://localhost:5000",
      "log_file": "task.log",
      "mode": "DIRECT_COPY",
      "name": "rluu pg to cockroach",
      "num_batch_rows_export": 100000,
      "num_concurrent_tables": 4,
      "num_flush_bytes": 2000000,
      "num_flush_rows": 200000,
      "pg_drop_slot": false,
      "pg_logical_plugin": "",
      "pg_logical_slot_name": "",
      "source_conn": "postgres://postgres:postgres@localhost:5432/molt?sslmode=disable",
      "store": "Local",
      "target_conn": "postgres://root@localhost:26257/defaultdb?sslmode=disable",
      "truncate": true
   }'
`, os.Args[0])
}

func moltserviceGetFetchTasksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice get-fetch-tasks

GetFetchTasks implements get_fetch_tasks.

Example:
    %[1]s moltservice get-fetch-tasks
`, os.Args[0])
}

func moltserviceGetSpecificFetchTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice get-specific-fetch-task -id INT

GetSpecificFetchTask implements get_specific_fetch_task.
    -id INT: id for the fetch task

Example:
    %[1]s moltservice get-specific-fetch-task --id 1072524642451577709
`, os.Args[0])
}

func moltserviceCreateVerifyTaskFromFetchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice create-verify-task-from-fetch -id INT

CreateVerifyTaskFromFetch implements create_verify_task_from_fetch.
    -id INT: id for the fetch task

Example:
    %[1]s moltservice create-verify-task-from-fetch --id 3120370108600835844
`, os.Args[0])
}

func moltserviceGetVerifyTasksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice get-verify-tasks

GetVerifyTasks implements get_verify_tasks.

Example:
    %[1]s moltservice get-verify-tasks
`, os.Args[0])
}

func moltserviceGetSpecificVerifyTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] moltservice get-specific-verify-task -id INT

GetSpecificVerifyTask implements get_specific_verify_task.
    -id INT: id for the verify task

Example:
    %[1]s moltservice get-specific-verify-task --id 4061375660015501511
`, os.Args[0])
}
